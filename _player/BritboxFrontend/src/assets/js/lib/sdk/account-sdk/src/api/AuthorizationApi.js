/**
 * BRITBOX ACCOUNT API - 1.0
 * BRITBOX ACCOUNT API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest', 'model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse', 'model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest', 'model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse', 'model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest', 'model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse', 'model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequest', 'model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3', 'model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse', 'model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest', 'model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest'), require('../model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse'), require('../model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest'), require('../model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse'), require('../model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest'), require('../model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse'), require('../model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequest'), require('../model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3'), require('../model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse'), require('../model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest'), require('../model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BritboxAccountApi10) {
      root.BritboxAccountApi10 = {};
    }
    root.BritboxAccountApi10.AuthorizationApi = factory(root.BritboxAccountApi10.ApiClient, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationRefreshTokenRequest, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationRefreshTokenResponse, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest, root.BritboxAccountApi10.BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse);
  }
}(this, function(ApiClient, BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest, BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse, BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest, BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse, BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest, BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse, BritboxAPIAccountModelsAuthorizationRefreshTokenRequest, BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3, BritboxAPIAccountModelsAuthorizationRefreshTokenResponse, BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest, BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse) {
  'use strict';

  /**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version 1.0
   */

  /**
   * Constructs a new AuthorizationApi. 
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authenticateCustomer operation.
     * @callback module:api/AuthorizationApi~authenticateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest} opts.request 
     * @param {module:api/AuthorizationApi~authenticateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse}
     */
    this.authenticateCustomer = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/authenticateCustomer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotContactPassword operation.
     * @callback module:api/AuthorizationApi~forgotContactPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest} opts.request 
     * @param {module:api/AuthorizationApi~forgotContactPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse}
     */
    this.forgotContactPassword = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/forgotContactPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthAccessToken operation.
     * @callback module:api/AuthorizationApi~getOAuthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest} opts.request 
     * @param {module:api/AuthorizationApi~getOAuthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse}
     */
    this.getOAuthAccessToken = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/getOAuthAccessToken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutCustomer operation.
     * @callback module:api/AuthorizationApi~logoutCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthorizationApi~logoutCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logoutCustomer = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/account/Authorization/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/AuthorizationApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequest} opts.request 
     * @param {module:api/AuthorizationApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse}
     */
    this.refreshToken = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationRefreshTokenResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/refreshToken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshTokenD3 operation.
     * @callback module:api/AuthorizationApi~refreshTokenD3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3} opts.request 
     * @param {module:api/AuthorizationApi~refreshTokenD3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationRefreshTokenResponse}
     */
    this.refreshTokenD3 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationRefreshTokenResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/refreshTokenD3', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateContactPassword operation.
     * @callback module:api/AuthorizationApi~validateContactPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest} opts.request 
     * @param {module:api/AuthorizationApi~validateContactPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse}
     */
    this.validateContactPassword = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AWSApiKeyAuth', 'JWToken'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse;

      return this.apiClient.callApi(
        '/v1/account/Authorization/validateContactPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
