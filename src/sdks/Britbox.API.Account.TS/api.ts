/* tslint:disable */
/* eslint-disable */

/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest {
  authCode: string;
  deviceName: string;
  deviceType: string;
}

export interface BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse {
  authCode?: string;
  expiresIn?: string;
  accessToken?: string;
  refreshToken?: string;
  responseCode?: string;
}

export interface BritboxAPIAccountModelsAuthorizationRefreshTokenRequest {
  refreshToken: string;
  deviceName: string;
  deviceType: string;
}

export interface BritboxAPIAccountModelsAuthorizationRefreshTokenResponse {
  response?: BritboxDataEvergentModelsRefreshTokenResponseMessageBaseResponse;
}

export interface BritboxDataEvergentModelsFailureMessage {
  errorMessage?: string;
  errorCode?: string;
}

export interface BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3 {
  d3Token: string;
  deviceName: string;
  deviceType: string;
}

export interface BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest {
  contactUserName: string;
  contactPassword: string;
  deviceDetails: BritboxDataEvergentModelsDeviceDetails;
}

export interface BritboxDataEvergentModelsDeviceDetails {
  serialNo?: string;
  deviceType?: string;
  deviceName?: string;
  modelNo?: string;
  brand?: string;
}

export interface BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse {
  response?: BritboxDataEvergentModelsAuthenticateCustomerResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest {
  email: string;
}

export interface BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse {
  response?: BritboxDataEvergentModelsForgotContactPasswordResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest {
  contactPassword?: string;
}

export interface BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse {
  response?: BritboxDataEvergentModelsValidateContactPasswordResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsCustomerGetProductsResponse {
  response?: BritboxDataEvergentModelsGetProductsResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsCustomerAddSubscriptionRequest {
  /**
   * Unique app id of the product in store.
   * ServiceID created in store(This is mandatory for in-app purchases (AppStore/ Google Wallet etc.).
   */
  appServiceID?: string;

  /**
   * serviceType of the Service.
   * PRODUCT.
   */
  serviceType?: string;

  /**
   * Indicate the Rate Type of the Product/Package.
   * Ex: "App Store Billing","Amazon App Store Billing","Google Wallet","Roku Payment"
   */
  rateType?: string;
  priceCharged?: number;

  /**
   * Unique User ID that was generated by Amazon System.
   * If Payment method is "Amazon App Store Billing" - then it is mandatory.
   */
  amazonUserId?: string;

  /** Payment method details */
  paymentMethodInfo?: BritboxDataEvergentModelsPaymentMethodInfo;
}

export interface BritboxDataEvergentModelsPaymentMethodInfo {
  label?: string;
  transactionReferenceMsg?: BritboxDataEvergentModelsTransactionReferenceMsg;
}

export interface BritboxDataEvergentModelsTransactionReferenceMsg {
  amount?: number;
  txID?: string;
  txMsg?: string;
  rokuPucId?: string;
}

export interface BritboxAPIAccountModelsCustomerAddSubscriptionResponse {
  response?: BritboxDataEvergentModelsAddSubscriptionResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsCustomerCreateUserV2Request {
  customerPassword: string;
  email: string;
  firstName: string;
  lastName: string;
  country: string;
  alertNotificationEmail: string;
  deviceDetails: BritboxDataEvergentModelsDeviceDetails;
}

export interface BritboxAPIAccountModelsDeviceRegisterDeviceRequest {
  activationCode?: string;
}

export interface BritboxAPIAccountModelsDeviceRegisterDeviceResponse {
  response?: BritboxDataEvergentModelsRegisterDeviceResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsDeviceGenerateDeviceActivationCodeRequest {
  deviceDetails?: BritboxDataEvergentModelsDeviceDetails;
}

export interface BritboxAPIAccountModelsDeviceGenerateDeviceActivationCodeResponse {
  response?: BritboxDataEvergentModelsGenerateDeviceActivationCodeResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsMediaFileGetItemMediaFilesResponse {
  externalResponse?: BritboxAPIAccountModelsMediaFileGetItemMediaFilesResponseResponse[];
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetProfileResponse {
  firstName?: string;
  lastName?: string;
  country?: string;
  status?: string;
  phoneNumber?: string;
  watched?: Record<string, MassiveSDKModelWatched>;
  watchedList?: MassiveSDKModelItemList;
  bookmarks?: Record<string, string>;
  bookmarkList?: MassiveSDKModelItemList;
  subscriptionStatus?: string;
  isInFreeTrail?: boolean;
  canStream?: boolean;
  parentalControl?: boolean;
  errors?: string[];
  messages?: string[];
}

export interface MassiveSDKModelWatched {
  itemId?: string;
  position?: number;
  firstWatchedDate?: string;
  lastWatchedDate?: string;
  isFullyWatched?: boolean;
}

export interface MassiveSDKModelItemList {
  itemTypes?: (
    | 'movie'
    | 'show'
    | 'season'
    | 'episode'
    | 'program'
    | 'link'
    | 'trailer'
    | 'channel'
    | 'customAsset'
  )[];
  id?: string;
  title?: string;
  description?: string;
  shortDescription?: string;
  tagline?: string;
  path?: string;
  size?: number;
  items?: MassiveSDKModelItemSummary[];
  images?: Record<string, string>;
  parameter?: string;
  paging?: MassiveSDKModelPagination;
  customFields?: object;
  themes?: MassiveSDKModelTheme[];
  listData?: MassiveSDKModelListData;
}

export interface MassiveSDKModelItemSummary {
  type?:
    | 'movie'
    | 'show'
    | 'season'
    | 'episode'
    | 'program'
    | 'link'
    | 'trailer'
    | 'channel'
    | 'customAsset';
  id?: string;
  subtype?: string;
  title?: string;
  contextualTitle?: string;
  shortDescription?: string;
  tagline?: string;
  classification?: MassiveSDKModelClassificationSummary;
  path?: string;
  watchPath?: string;
  scopes?: string[];
  releaseYear?: number;
  episodeCount?: number;
  availableEpisodeCount?: number;
  availableSeasonCount?: number;
  seasonNumber?: number;
  episodeNumber?: number;
  episodeName?: string;
  showId?: string;
  showTitle?: string;
  seasonId?: string;
  seasonTitle?: string;
  channelShortCode?: string;
  hasClosedCaptions?: boolean;
  averageUserRating?: number;
  badge?: string;
  genres?: string[];
  duration?: number;
  customId?: string;
  offers?: MassiveSDKModelOffer[];
  images?: Record<string, string>;
  themes?: MassiveSDKModelTheme[];
  customFields?: object;
  show?: MassiveSDKModelShow;
  episodes?: MassiveSDKModelEpisodes;
  season?: MassiveSDKModelItemSummary;
  credits?: MassiveSDKModelCredit[];
  vams?: object[];
  trailers?: object[];
}

export interface MassiveSDKModelPagination {
  next?: string;
  previous?: string;
  page?: number;
  size?: number;
  total?: number;
  authorization?: MassiveSDKModelPaginationAuth;
  options?: MassiveSDKModelPaginationOptions;
}

export interface MassiveSDKModelTheme {
  type?: 'Background' | 'Text' | 'Custom';
  colors?: MassiveSDKModelThemeColor[];
}

export interface MassiveSDKModelListData {
  ContinueWatching?: MassiveSDKModelContinueWatchingListData;
}

export interface MassiveSDKModelClassificationSummary {
  code?: string;
  name?: string;
}

export interface MassiveSDKModelOffer {
  deliveryType?: 'Stream' | 'Download' | 'StreamOrDownload' | 'ProgressiveDownload' | 'None';
  resolution?: 'SD' | 'HD-720' | 'HD-1080' | 'HD-4K' | 'External' | 'Unknown';
  ownership?: 'Subscription' | 'Free' | 'Rent' | 'Own' | 'None';
  availability?: 'Available' | 'ComingSoon';
  scopes?: string[];
  maxPlays?: number;
  maxDownloads?: number;
  rentalPeriod?: number;
  playPeriod?: number;
  exclusionRules?: MassiveSDKModelExclusionRule[];
  id?: string;
  name?: string;
  price?: number;
  startDate?: string;
  endDate?: string;
  subscriptionCode?: string;
  customFields?: object;
}

export interface MassiveSDKModelShow {
  images?: Record<string, string>;
  advisoryText?: string;
  copyright?: string;
  credits?: MassiveSDKModelCredit[];
  customMetadata?: object[];
  distributor?: string;
  availableSeasonCount?: number;
  offers?: MassiveSDKModelOffer[];
  trailers?: object[];
  vams?: object[];
  scopes?: string[];
  categories?: string[];
  customFields?: object;
  customId?: string;
  genres?: string[];
  id?: string;
  type?: string;
  description?: string;
  maximumOfferEnd?: string;
  shortDescription?: string;
  contextualTitle?: string;
  themes?: object[];
  title?: string;
  totalUserRatings?: number;
  path?: string;
  genrePaths?: string[];
  seasons?: MassiveSDKModelSeasons;
}

export interface MassiveSDKModelEpisodes {
  id?: string;
  path?: string;
  items?: MassiveSDKModelEpisodesItem[];
  size?: number;
  paging?: MassiveSDKModelPaging;
}

export interface MassiveSDKModelCredit {
  role?:
    | 'actor'
    | 'associateproducer'
    | 'coactor'
    | 'director'
    | 'executiveproducer'
    | 'filminglocation'
    | 'guest'
    | 'narrator'
    | 'other'
    | 'presenter'
    | 'producer'
    | 'productmanager'
    | 'thememusicby'
    | 'voice'
    | 'writer';
  name?: string;
  path?: string;
  character?: string;
}

export interface MassiveSDKModelPaginationAuth {
  type?: 'UserAccount' | 'UserProfile';
  scope?: 'Catalog' | 'Commerce' | 'Settings';
}

export interface MassiveSDKModelPaginationOptions {
  order?: 'asc' | 'desc';
  orderBy?: 'a-z' | 'release-year' | 'date-added' | 'date-modified';
  itemType?:
    | 'movie'
    | 'show'
    | 'season'
    | 'episode'
    | 'program'
    | 'link'
    | 'trailer'
    | 'channel'
    | 'customAsset';
  pageSize?: number;
  maxRating?: string;
  completed?: boolean;
}

export interface MassiveSDKModelThemeColor {
  name?: string;
  opacity?: number;
  value?: string;
}

export interface MassiveSDKModelContinueWatchingListData {
  itemInclusions?: Record<string, MassiveSDKModelContinueWatchingListDataExpansion>;
}

export interface MassiveSDKModelExclusionRule {
  excludeDelivery?: 'Stream' | 'Download' | 'StreamOrDownload' | 'ProgressiveDownload' | 'None';
  excludeMinResolution?: 'SD' | 'HD-720' | 'HD-1080' | 'HD-4K' | 'External' | 'Unknown';
  description?: string;
  device?: string;
  excludeAirplay?: boolean;
  excludeChromecast?: boolean;
}

export interface MassiveSDKModelSeasons {
  id?: string;
  path?: string;
  items?: MassiveSDKModelSeasonsItem[];
  size?: number;
  paging?: MassiveSDKModelPaging;
}

export interface MassiveSDKModelEpisodesItem {
  images?: Record<string, string>;
  duration?: number;
  releaseYear?: number;
  episodeNumber?: number;
  episodeName?: string;
  seasonId?: string;
  showId?: string;
  offers?: MassiveSDKModelOffer[];
  scopes?: string[];
  categories?: string[];
  customFields?: object;
  customId?: string;
  genres?: string[];
  id?: string;
  type?: string;
  maximumOfferEnd?: string;
  media?: MassiveSDKModelMedia[];
  shortDescription?: string;
  contextualTitle?: string;
  title?: string;
  classification?: MassiveSDKModelClassification;
  totalUserRatings?: number;
  path?: string;
  watchPath?: string;
  showTitle?: string;
  seasonTitle?: string;
  badge?: string;
}

export interface MassiveSDKModelPaging {
  total?: number;
  page?: number;
  size?: number;
  options?: MassiveSDKModelOptions;
}

export interface MassiveSDKModelContinueWatchingListDataExpansion {
  episode?: MassiveSDKModelItemSummary;
  season?: MassiveSDKModelItemSummary;
  show?: MassiveSDKModelItemSummary;
}

export interface MassiveSDKModelSeasonsItem {
  images?: Record<string, string>;
  releaseYear?: number;
  availableEpisodeCount?: number;
  seasonNumber?: number;
  showId?: string;
  episodeCount?: number;
  offers?: MassiveSDKModelOffer[];
  scopes?: string[];
  categories?: string[];
  customFields?: object;
  customId?: string;
  genres?: string[];
  id?: string;
  type?: string;
  maximumOfferEnd?: string;
  media?: object[];
  shortDescription?: string;
  contextualTitle?: string;
  title?: string;
  classification?: MassiveSDKModelClassification;
  totalUserRatings?: number;
  path?: string;
  showTitle?: string;
}

export interface MassiveSDKModelMedia {
  duration?: number;
}

export interface MassiveSDKModelClassification {
  code?: string;
  name?: string;
  advisoryText?: string;
  level?: number;
  system?: string;
  images?: Record<string, string>;
}

export interface MassiveSDKModelOptions {
  pageSize?: number;
}

export interface BritboxAPIAccountModelsProfileUpdateProfileRequest {
  email: string;
  firstName: string;
  lastName: string;
  mobileNumber: string;
  alertNotificationEmail: boolean;
}

export interface BritboxAPIAccountModelsProfileUpdateProfileResponse {
  response?: BritboxDataEvergentModelsUpdateProfileResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsProfileResetPasswordRequest {
  email: string;
  contactPassword: string;
}

export interface BritboxAPIAccountModelsProfileResetPasswordResponse {
  response?: BritboxDataEvergentModelsResetPasswordResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsProfileGetWatchedResponse {
  externalResponse?: Record<string, MassiveSDKModelWatched>;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileDeleteWatchedRequest {
  itemIds?: string[];
}

export interface BritboxAPIAccountModelsProfileGetWatchedListResponse {
  externalResponse?: MassiveSDKModelItemList;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetItemWatchedStatusResponse {
  externalResponse?: MassiveSDKModelWatched;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileSetItemWatchedStatusRequest {
  position: number;
}

export interface BritboxAPIAccountModelsProfileSetItemWatchedStatusResponse {
  externalResponse?: MassiveSDKModelWatched;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetContinueWatchingListResponse {
  externalResponse?: MassiveSDKModelItemList;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileBookmarkItemResponse {
  externalResponse?: MassiveSDKModelBookmark;
  itemDetail?: MassiveSDKModelItemDetail;
  errors?: string[];
  messages?: string[];
}

export interface MassiveSDKModelBookmark {
  itemId?: string;
  creationDate?: string;
}

export interface MassiveSDKModelItemDetail {
  advisoryText?: string;
  copyright?: string;
  distributor?: string;
  description?: string;
  customMetadata?: MassiveSDKModelItemCustomMetadata[];
  genrePaths?: string[];
  location?: string;
  venue?: string;
  eventDate?: string;
  credits?: MassiveSDKModelCredit[];
  seasons?: MassiveSDKModelItemList;
  episodes?: MassiveSDKModelItemList;
  season?: MassiveSDKModelItemDetail;
  show?: MassiveSDKModelItemDetail;
  totalUserRatings?: number;
  trailers?: MassiveSDKModelItemSummary[];
  type?:
    | 'movie'
    | 'show'
    | 'season'
    | 'episode'
    | 'program'
    | 'link'
    | 'trailer'
    | 'channel'
    | 'customAsset';
  id?: string;
  subtype?: string;
  title?: string;
  contextualTitle?: string;
  shortDescription?: string;
  tagline?: string;
  classification?: MassiveSDKModelClassificationSummary;
  path?: string;
  watchPath?: string;
  scopes?: string[];
  releaseYear?: number;
  episodeCount?: number;
  availableEpisodeCount?: number;
  availableSeasonCount?: number;
  seasonNumber?: number;
  episodeNumber?: number;
  episodeName?: string;
  showId?: string;
  showTitle?: string;
  seasonId?: string;
  seasonTitle?: string;
  channelShortCode?: string;
  hasClosedCaptions?: boolean;
  averageUserRating?: number;
  badge?: string;
  genres?: string[];
  duration?: number;
  customId?: string;
  offers?: MassiveSDKModelOffer[];
  images?: Record<string, string>;
  themes?: MassiveSDKModelTheme[];
  customFields?: object;
  vams?: object[];
}

export interface MassiveSDKModelItemCustomMetadata {
  name?: string;
  value?: string;
}

export interface BritboxAPIAccountModelsProfileGetItemBookmarkResponse {
  externalResponse?: MassiveSDKModelBookmark;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetBookmarkListResponse {
  externalResponse?: MassiveSDKModelItemList;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetBookmarksResponse {
  externalResponse?: Record<string, string>;
  errors?: string[];
  messages?: string[];
}

export interface BritboxAPIAccountModelsProfileGetNextPlaybackItemResponse {
  externalResponse?: MassiveSDKModelNextPlaybackItem;
  errors?: string[];
  messages?: string[];
}

export interface MassiveSDKModelNextPlaybackItem {
  suggestionType?: 'StartWatching' | 'ContinueWatching' | 'RestartWatching' | 'Sequential' | 'None';
  sourceItemId?: string;
  firstWatchedDate?: string;
  lastWatchedDate?: string;
  next?: MassiveSDKModelItemDetail;
}

export interface BritboxAPIAccountModelsProfileGetParentalControlDetailsResponse {
  response?: BritboxDataEvergentModelsGetParentalControlDetailsResponseMessageBase;
}

export interface BritboxDataEvergentModelsGetParentalControlDetailsResponseMessageBase {
  getParentalControlDetailsResponseMessage?: BritboxDataEvergentModelsGetParentalControlDetailsResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsProfileUpdateParentalControlDetailsRequest {
  /** Active or deactivate the parental control. true or false. */
  parentalControl?: string;

  /** Level of the parental control. */
  parentalControlLevel?: number;

  /** Secure pin of parental control. */
  newParentalControlPin?: string;
}

export interface BritboxAPIAccountModelsProfileUpdateParentalControlDetailsResponse {
  response?: BritboxDataEvergentModelsUpdateParentalControlDetailsResponseMessageBase;
}

export interface BritboxDataEvergentModelsUpdateParentalControlDetailsResponseMessageBase {
  updateParentalControlDetailsResponseMessage?: BritboxDataEvergentModelsUpdateParentalControlDetailsResponseMessageBaseResponse;
}

export interface BritboxAPIAccountModelsProfileCheckParentalControlResponse {
  canStream?: boolean;
}

export interface BritboxAPIAccountModelsProfileValidateParentalControlPINRequest {
  parentalControlPin?: string;
  itemId?: string;
}

export interface BritboxAPIAccountModelsProfileValidateParentalControlPINResponse {
  response?: BritboxDataEvergentModelsValidateParentalControlPINResponseMessageBase;
  token?: string;
}

export interface BritboxDataEvergentModelsValidateParentalControlPINResponseMessageBase {
  validateParentalControlPINResponseMessage?: BritboxDataEvergentModelsValidateParentalControlPINResponseMessageBaseResponse;
}

export interface BritboxDataEvergentModelsRefreshTokenResponseMessageBaseResponse {
  accessToken?: string;
  refreshToken?: string;
  tokenType?: string;
  expiresIn?: string;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsAuthenticateCustomerResponseMessageBaseResponse {
  accessToken?: string;
  refreshToken?: string;
  tokenType?: string;
  expiresIn?: string;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsForgotContactPasswordResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsValidateContactPasswordResponseMessageBaseResponse {
  email?: string;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsGetProductsResponseMessageBaseResponse {
  productsResponseMessage?: BritboxDataEvergentModelsGetProductsResponseMessageBaseProductsResponseMsg[];
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsGetProductsResponseMessageBaseProductsResponseMsg {
  dmaName?: string;
  duration?: string;
  retailPrice?: number;
  currencyCode?: string;
  productDescription?: string;
  productCategory?: string;
  serviceType?: string;
  currencySymbol?: string;
  displayOrder?: string;
  isAdsEnabled?: boolean;
  renewable?: boolean;
  displayName?: string;
  period?: string;
  productName?: string;
  skuORQuickCode?: string;
  basicService?: boolean;
  appChannels?: BritboxDataEvergentModelsGetProductsResponseMessageBaseAppChannels[];
  scOfferTypes?: BritboxDataEvergentModelsGetProductsResponseMessageBaseSCOfferTypes[];
  promotions?: BritboxDataEvergentModelsGetProductsResponseMessageBasePromotions[];
}

export interface BritboxDataEvergentModelsGetProductsResponseMessageBaseAppChannels {
  appName?: string;
  appChannel?: string;
  appID?: string;
}

export interface BritboxDataEvergentModelsGetProductsResponseMessageBaseSCOfferTypes {
  offerType?: string;
  salesChannel?: string;
}

export interface BritboxDataEvergentModelsGetProductsResponseMessageBasePromotions {
  amount?: number;
  promotionId?: string;
  promotionName?: string;
  promotionType?: string;
  isVODPromotion?: boolean;
  isFreeTrial?: boolean;
  promotionExpiryfferType?: number;
  promotionDuration?: number;
  promotionPeriod?: string;
}

export interface BritboxDataEvergentModelsAddSubscriptionResponseMessageBaseResponse {
  orderId?: string;
  validityTill?: number;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsRegisterDeviceResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage;
}

export interface BritboxDataEvergentModelsGenerateDeviceActivationCodeResponseMessageBaseResponse {
  activationCode?: string;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxAPIAccountModelsMediaFileGetItemMediaFilesResponseResponse {
  token?: string;
  url?: string;
}

export interface BritboxDataEvergentModelsUpdateProfileResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsResetPasswordResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsGetParentalControlDetailsResponseMessageBaseResponse {
  parentalControlLevel?: number;
  parentalControl?: boolean;
  parentalControlPIN?: string;
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsUpdateParentalControlDetailsResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export interface BritboxDataEvergentModelsValidateParentalControlPINResponseMessageBaseResponse {
  message?: string;
  responseCode?: string;
  status?: string;
  failureMessage?: BritboxDataEvergentModelsFailureMessage[];
}

export type RequestParams = Omit<RequestInit, 'body' | 'method'> & {
  secure?: boolean;
};

export type RequestQueryParamsType = Record<string | number, any>;

type ApiConfig<SecurityDataType> = {
  baseUrl?: string;
  baseApiParams?: RequestParams;
  securityWorker?: (securityData: SecurityDataType) => RequestParams;
};

enum BodyType {
  Json,
}

class HttpClient<SecurityDataType> {
  public baseUrl: string = '';
  private securityData: SecurityDataType = null as any;
  private securityWorker: ApiConfig<SecurityDataType>['securityWorker'] = (() => {}) as any;

  private baseApiParams: RequestParams = {
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json',
    },
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
  };

  constructor({ baseUrl, baseApiParams, securityWorker }: ApiConfig<SecurityDataType> = {}) {
    this.baseUrl = baseUrl || this.baseUrl;
    this.baseApiParams = baseApiParams || this.baseApiParams;
    this.securityWorker = securityWorker || this.securityWorker;
  }

  public setSecurityData = (data: SecurityDataType) => {
    this.securityData = data;
  };

  private addQueryParam(query: RequestQueryParamsType, key: string) {
    return (
      encodeURIComponent(key) +
      '=' +
      encodeURIComponent(Array.isArray(query[key]) ? query[key].join(',') : query[key])
    );
  }

  protected addQueryParams(rawQuery?: RequestQueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key]);
    return keys.length
      ? `?${keys
          .map((key) =>
            typeof query[key] === 'object' && !Array.isArray(query[key])
              ? this.addQueryParams(query[key] as object).substring(1)
              : this.addQueryParam(query, key)
          )
          .join('&')}`
      : '';
  }

  private bodyFormatters: Record<BodyType, (input: any) => any> = {
    [BodyType.Json]: JSON.stringify,
  };

  private mergeRequestOptions(
    params: RequestParams,
    securityParams?: RequestParams
  ): RequestParams {
    return {
      ...this.baseApiParams,
      ...params,
      ...(securityParams || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params.headers || {}),
        ...((securityParams && securityParams.headers) || {}),
      },
    };
  }

  private safeParseResponse = <T = any, E = any>(response: Response): Promise<T> =>
    response
      .json()
      .then((data) => data)
      .catch((e) => response.text);

  public request = <T = any, E = any>(
    path: string,
    method: string,
    { secure, ...params }: RequestParams = {},
    body?: any,
    bodyType?: BodyType,
    secureByDefault?: boolean
  ): Promise<T> =>
    fetch(`${this.baseUrl}${path}`, {
      // @ts-ignore
      ...this.mergeRequestOptions(
        params,
        (secureByDefault || secure) && this.securityWorker(this.securityData)
      ),
      method,
      body: body ? this.bodyFormatters[bodyType || BodyType.Json](body) : null,
    }).then(async (response) => {
      const data = await this.safeParseResponse<T, E>(response);
      if (!response.ok) throw data;
      return data;
    });
}

/**
 * @title BRITBOX ACCOUNT API - 1.0
 * @version 1.0
 * BRITBOX ACCOUNT API
 */
export class Api<SecurityDataType = any> extends HttpClient<SecurityDataType> {
  v1 = {
    /**
     * @tags Authorization
     * @name GetOAuthAccessToken
     * @request POST:/v1/account/Authorization/getOAuthAccessToken
     */
    getOAuthAccessToken: (
      request: BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationGetOAuthAccessTokenResponse, any>(
        `/v1/account/Authorization/getOAuthAccessToken`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name RefreshToken
     * @request POST:/v1/account/Authorization/refreshToken
     */
    refreshToken: (
      request: BritboxAPIAccountModelsAuthorizationRefreshTokenRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationRefreshTokenResponse, any>(
        `/v1/account/Authorization/refreshToken`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name RefreshTokenD3
     * @request POST:/v1/account/Authorization/refreshTokenD3
     */
    refreshTokenD3: (
      request: BritboxAPIAccountModelsAuthorizationRefreshTokenRequestD3,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationRefreshTokenResponse, any>(
        `/v1/account/Authorization/refreshTokenD3`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name AuthenticateCustomer
     * @request POST:/v1/account/Authorization/authenticateCustomer
     */
    authenticateCustomer: (
      request: BritboxAPIAccountModelsAuthorizationAuthenticateCustomerRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationAuthenticateCustomerResponse, any>(
        `/v1/account/Authorization/authenticateCustomer`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name ForgotContactPassword
     * @request POST:/v1/account/Authorization/forgotContactPassword
     */
    forgotContactPassword: (
      request: BritboxAPIAccountModelsAuthorizationForgotContactPasswordRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationForgotContactPasswordResponse, any>(
        `/v1/account/Authorization/forgotContactPassword`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name ValidateContactPassword
     * @request POST:/v1/account/Authorization/validateContactPassword
     */
    validateContactPassword: (
      request: BritboxAPIAccountModelsAuthorizationValidateContactPasswordRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsAuthorizationValidateContactPasswordResponse, any>(
        `/v1/account/Authorization/validateContactPassword`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Authorization
     * @name LogoutCustomer
     * @request POST:/v1/account/Authorization/logout
     */
    logoutCustomer: (params?: RequestParams) =>
      this.request<any, any>(`/v1/account/Authorization/logout`, 'POST', params),

    /**
     * @tags Customer
     * @name GetProducts
     * @request GET:/v1/account/Customer/products
     */
    getProducts: (query?: { dmaID?: string; countryCode?: string }, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsCustomerGetProductsResponse, any>(
        `/v1/account/Customer/products${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Customer
     * @name AddSubscription
     * @request POST:/v1/account/Customer/subscription
     */
    addSubscription: (
      request: BritboxAPIAccountModelsCustomerAddSubscriptionRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsCustomerAddSubscriptionResponse, any>(
        `/v1/account/Customer/subscription`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Customer
     * @name Register
     * @request POST:/v1/account/Customer/register
     */
    register: (
      request: BritboxAPIAccountModelsCustomerCreateUserV2Request,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsCustomerAddSubscriptionResponse, any>(
        `/v1/account/Customer/register`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Device
     * @name RegisterDevice
     * @request POST:/v1/account/Device/registerDevice
     */
    registerDevice: (
      request: BritboxAPIAccountModelsDeviceRegisterDeviceRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsDeviceRegisterDeviceResponse, any>(
        `/v1/account/Device/registerDevice`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Device
     * @name GenerateDeviceActivationCode
     * @request POST:/v1/account/Device/generateDeviceActivationCode
     */
    generateDeviceActivationCode: (
      request: BritboxAPIAccountModelsDeviceGenerateDeviceActivationCodeRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsDeviceGenerateDeviceActivationCodeResponse, any>(
        `/v1/account/Device/generateDeviceActivationCode`,
        'POST',
        params,
        request
      ),

    /**
     * @tags MediaFile
     * @name GetItemMediaFiles
     * @request GET:/v1/account/MediaFile/{id}
     */
    getItemMediaFiles: (
      id: string,
      query?: {
        device?: string;
        sub?: string;
        segments?: string[];
        useCustomId?: boolean;
        pcToken?: string;
      },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsMediaFileGetItemMediaFilesResponse, any>(
        `/v1/account/MediaFile/${id}${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetProfile
     * @request GET:/v1/account/Profile
     */
    getProfile: (query?: { useCustomId?: boolean; segments?: string[] }, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetProfileResponse, any>(
        `/v1/account/Profile${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name UpdateProfile
     * @request PUT:/v1/account/Profile
     */
    updateProfile: (
      request: BritboxAPIAccountModelsProfileUpdateProfileRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileUpdateProfileResponse, any>(
        `/v1/account/Profile`,
        'PUT',
        params,
        request
      ),

    /**
     * @tags Profile
     * @name ResetPassword
     * @request POST:/v1/account/Profile/resetPassword
     */
    resetPassword: (
      request: BritboxAPIAccountModelsProfileResetPasswordRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileResetPasswordResponse, any>(
        `/v1/account/Profile/resetPassword`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Profile
     * @name GetWatched
     * @request GET:/v1/account/Profile/watched
     */
    getWatched: (params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetWatchedResponse, any>(
        `/v1/account/Profile/watched`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name DeleteWatched
     * @request DELETE:/v1/account/Profile/watched
     */
    deleteWatched: (
      request: BritboxAPIAccountModelsProfileDeleteWatchedRequest,
      query?: { segments?: string[] },
      params?: RequestParams
    ) =>
      this.request<any, any>(
        `/v1/account/Profile/watched${this.addQueryParams(query)}`,
        'DELETE',
        params,
        request
      ),

    /**
     * @tags Profile
     * @name GetWatchedList
     * @request GET:/v1/account/Profile/watched/list
     */
    getWatchedList: (
      query?: {
        page?: number;
        pageSize?: number;
        completed?: boolean;
        order?: string;
        orderBy?: string;
        itemType?: string;
        device?: string;
        sub?: string;
        useCustomId?: boolean;
        segments?: string[];
      },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileGetWatchedListResponse, any>(
        `/v1/account/Profile/watched/list${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetItemWatchedStatus
     * @request GET:/v1/account/Profile/watched/{itemId}
     */
    getItemWatchedStatus: (itemId: string, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetItemWatchedStatusResponse, any>(
        `/v1/account/Profile/watched/${itemId}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name SetItemWatchedStatus
     * @request PUT:/v1/account/Profile/watched/{itemId}
     */
    setItemWatchedStatus: (
      itemId: string,
      request: BritboxAPIAccountModelsProfileSetItemWatchedStatusRequest,
      query?: { segments?: string[] },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileSetItemWatchedStatusResponse, any>(
        `/v1/account/Profile/watched/${itemId}${this.addQueryParams(query)}`,
        'PUT',
        params,
        request
      ),

    /**
     * @tags Profile
     * @name GetContinueWatchingList
     * @request GET:/v1/account/Profile/watched/show/{itemId}
     */
    getContinueWatchingList: (itemId: string, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetItemWatchedStatusResponse, any>(
        `/v1/account/Profile/watched/show/${itemId}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetContinueWatchingList
     * @request GET:/v1/account/Profile/continue-watching/list
     * @originalName getContinueWatchingList
     * @duplicate
     */
    getContinueWatchingList2: (
      query?: {
        showItemType?: string;
        include?: string[];
        page?: number;
        pageSize?: number;
        maxRating?: string;
        device?: string;
        sub?: string;
        segments?: string[];
      },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileGetContinueWatchingListResponse, any>(
        `/v1/account/Profile/continue-watching/list${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetItemBookmark
     * @request GET:/v1/account/Profile/bookmarks/{itemId}
     */
    getItemBookmark: (itemId: string, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetItemBookmarkResponse, any>(
        `/v1/account/Profile/bookmarks/${itemId}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name BookmarkItem
     * @request PUT:/v1/account/Profile/bookmarks/{itemId}
     */
    bookmarkItem: (itemId: string, query?: { segments?: string[] }, params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileBookmarkItemResponse, any>(
        `/v1/account/Profile/bookmarks/${itemId}${this.addQueryParams(query)}`,
        'PUT',
        params
      ),

    /**
     * @tags Profile
     * @name DeleteItemBookmark
     * @request DELETE:/v1/account/Profile/bookmarks/{itemId}
     */
    deleteItemBookmark: (itemId: string, query?: { segments?: string[] }, params?: RequestParams) =>
      this.request<any, any>(
        `/v1/account/Profile/bookmarks/${itemId}${this.addQueryParams(query)}`,
        'DELETE',
        params
      ),

    /**
     * @tags Profile
     * @name GetBookmarkList
     * @request GET:/v1/account/Profile/bookmarks/list
     */
    getBookmarkList: (
      query?: {
        page?: number;
        pageSize?: number;
        order?: string;
        itemType?: string;
        device?: string;
        sub?: string;
        useCustomId?: boolean;
        segments?: string[];
      },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileGetBookmarkListResponse, any>(
        `/v1/account/Profile/bookmarks/list${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetBookmarks
     * @request GET:/v1/account/Profile/bookmarks
     */
    getBookmarks: (params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetBookmarksResponse, any>(
        `/v1/account/Profile/bookmarks`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetNextPlaybackItem
     * @request GET:/v1/account/Profile/items/{itemId}/next
     */
    getNextPlaybackItem: (
      itemId: string,
      query?: {
        maxRating?: string;
        expand?: string;
        device?: string;
        sub?: string;
        segments?: string[];
      },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileGetNextPlaybackItemResponse, any>(
        `/v1/account/Profile/items/${itemId}/next${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name GetParentalControlDetails
     * @request GET:/v1/account/Profile/parentalcontrol
     */
    getParentalControlDetails: (params?: RequestParams) =>
      this.request<BritboxAPIAccountModelsProfileGetParentalControlDetailsResponse, any>(
        `/v1/account/Profile/parentalcontrol`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name UpdateParentalControlDetails
     * @request POST:/v1/account/Profile/parentalcontrol
     */
    updateParentalControlDetails: (
      request: BritboxAPIAccountModelsProfileUpdateParentalControlDetailsRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileUpdateParentalControlDetailsResponse, any>(
        `/v1/account/Profile/parentalcontrol`,
        'POST',
        params,
        request
      ),

    /**
     * @tags Profile
     * @name CheckParentalControl
     * @request GET:/v1/account/Profile/parentalcontrol/canstream
     */
    checkParentalControl: (
      query?: { classificationName?: string; segment?: string },
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileCheckParentalControlResponse, any>(
        `/v1/account/Profile/parentalcontrol/canstream${this.addQueryParams(query)}`,
        'GET',
        params
      ),

    /**
     * @tags Profile
     * @name ValidateParentalControlPIN
     * @request POST:/v1/account/Profile/parentalcontrol/validate
     */
    validateParentalControlPin: (
      request: BritboxAPIAccountModelsProfileValidateParentalControlPINRequest,
      params?: RequestParams
    ) =>
      this.request<BritboxAPIAccountModelsProfileValidateParentalControlPINResponse, any>(
        `/v1/account/Profile/parentalcontrol/validate`,
        'POST',
        params,
        request
      ),
  };
}
