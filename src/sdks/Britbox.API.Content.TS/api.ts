/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * BRITBOX CONTENT API - 1.0
 * BRITBOX CONTENT API
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://staging-api.britbox.takeoffmedia.com/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsConfigGetConfigResponse
 */
export interface BritboxAPIContentModelsConfigGetConfigResponse {
    /**
     *
     * @type {MassiveSDKModelAppConfig}
     * @memberof BritboxAPIContentModelsConfigGetConfigResponse
     */
    externalResponse?: MassiveSDKModelAppConfig;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsConfigGetConfigResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsConfigGetConfigResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsItemsGetItemChildrenListResponse
 */
export interface BritboxAPIContentModelsItemsGetItemChildrenListResponse {
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof BritboxAPIContentModelsItemsGetItemChildrenListResponse
     */
    externalResponse?: MassiveSDKModelItemList;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemChildrenListResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemChildrenListResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsItemsGetItemRelatedListResponse
 */
export interface BritboxAPIContentModelsItemsGetItemRelatedListResponse {
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof BritboxAPIContentModelsItemsGetItemRelatedListResponse
     */
    externalResponse?: MassiveSDKModelItemList;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemRelatedListResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemRelatedListResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsItemsGetItemResponse
 */
export interface BritboxAPIContentModelsItemsGetItemResponse {
    /**
     *
     * @type {MassiveSDKModelItemDetail}
     * @memberof BritboxAPIContentModelsItemsGetItemResponse
     */
    externalResponse?: MassiveSDKModelItemDetail;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsItemsGetItemResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsListsGetListResponse
 */
export interface BritboxAPIContentModelsListsGetListResponse {
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof BritboxAPIContentModelsListsGetListResponse
     */
    externalResponse?: MassiveSDKModelItemList;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsListsGetListResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsListsGetListResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsListsGetListsResponse
 */
export interface BritboxAPIContentModelsListsGetListsResponse {
    /**
     *
     * @type {Array<MassiveSDKModelItemList>}
     * @memberof BritboxAPIContentModelsListsGetListsResponse
     */
    externalResponse?: Array<MassiveSDKModelItemList>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsListsGetListsResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsListsGetListsResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface BritboxAPIContentModelsPageGetPageResponse
 */
export interface BritboxAPIContentModelsPageGetPageResponse {
    /**
     *
     * @type {MassiveSDKModelPage}
     * @memberof BritboxAPIContentModelsPageGetPageResponse
     */
    externalResponse?: MassiveSDKModelPage;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsPageGetPageResponse
     */
    errors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BritboxAPIContentModelsPageGetPageResponse
     */
    messages?: Array<string>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfig
 */
export interface MassiveSDKModelAppConfig {
    /**
     *
     * @type {{ [key: string]: MassiveSDKModelClassification; }}
     * @memberof MassiveSDKModelAppConfig
     */
    classification?: { [key: string]: MassiveSDKModelClassification; };
    /**
     *
     * @type {MassiveSDKModelAppConfigSubscription}
     * @memberof MassiveSDKModelAppConfig
     */
    subscription?: MassiveSDKModelAppConfigSubscription;
    /**
     *
     * @type {MassiveSDKModelAppConfigPlayback}
     * @memberof MassiveSDKModelAppConfig
     */
    playback?: MassiveSDKModelAppConfigPlayback;
    /**
     *
     * @type {MassiveSDKModelAppConfigGeneral}
     * @memberof MassiveSDKModelAppConfig
     */
    general?: MassiveSDKModelAppConfigGeneral;
    /**
     *
     * @type {MassiveSDKModelNavigation}
     * @memberof MassiveSDKModelAppConfig
     */
    navigation?: MassiveSDKModelNavigation;
    /**
     *
     * @type {Array<MassiveSDKModelPageSummary>}
     * @memberof MassiveSDKModelAppConfig
     */
    sitemap?: Array<MassiveSDKModelPageSummary>;
    /**
     *
     * @type {MassiveSDKModelAppConfigDisplay}
     * @memberof MassiveSDKModelAppConfig
     */
    display?: MassiveSDKModelAppConfigDisplay;
    /**
     *
     * @type {MassiveSDKModelAppConfigI18n}
     * @memberof MassiveSDKModelAppConfig
     */
    i18n?: MassiveSDKModelAppConfigI18n;
    /**
     *
     * @type {MassiveSDKModelAppConfigLinear}
     * @memberof MassiveSDKModelAppConfig
     */
    linear?: MassiveSDKModelAppConfigLinear;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigDisplay
 */
export interface MassiveSDKModelAppConfigDisplay {
    /**
     *
     * @type {Array<MassiveSDKModelTheme>}
     * @memberof MassiveSDKModelAppConfigDisplay
     */
    themes?: Array<MassiveSDKModelTheme>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigGeneral
 */
export interface MassiveSDKModelAppConfigGeneral {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    websiteUrl?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    gaToken?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    stripeKey?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    facebookAppId?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    itemImageTypes?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    currencyCode?: string;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    customFields?: any;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    maxUserRating?: number;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    mandatorySignIn?: boolean;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelAppConfigGeneral
     */
    defaultTimeZone?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigI18n
 */
export interface MassiveSDKModelAppConfigI18n {
    /**
     *
     * @type {Array<MassiveSDKModelLanguage>}
     * @memberof MassiveSDKModelAppConfigI18n
     */
    languages?: Array<MassiveSDKModelLanguage>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigLinear
 */
export interface MassiveSDKModelAppConfigLinear {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigLinear
     */
    viewingWindowDaysAfter?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigLinear
     */
    viewingWindowDaysBefore?: number;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigPlayback
 */
export interface MassiveSDKModelAppConfigPlayback {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigPlayback
     */
    heartbeatFrequency?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof MassiveSDKModelAppConfigPlayback
     */
    viewEventPoints?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigPlayback
     */
    chainPlaySqueezeback?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigPlayback
     */
    chainPlayTimeout?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelAppConfigPlayback
     */
    chainPlayCountdown?: number;
}

/**
 *
 * @export
 * @interface MassiveSDKModelAppConfigSubscription
 */
export interface MassiveSDKModelAppConfigSubscription {
    /**
     *
     * @type {Array<MassiveSDKModelPlan>}
     * @memberof MassiveSDKModelAppConfigSubscription
     */
    plans?: Array<MassiveSDKModelPlan>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelClassification
 */
export interface MassiveSDKModelClassification {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassification
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassification
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassification
     */
    advisoryText?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelClassification
     */
    level?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassification
     */
    system?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelClassification
     */
    images?: { [key: string]: string; };
}

/**
 *
 * @export
 * @interface MassiveSDKModelClassificationSummary
 */
export interface MassiveSDKModelClassificationSummary {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassificationSummary
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelClassificationSummary
     */
    name?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelContinueWatchingListData
 */
export interface MassiveSDKModelContinueWatchingListData {
    /**
     *
     * @type {{ [key: string]: MassiveSDKModelContinueWatchingListDataExpansion; }}
     * @memberof MassiveSDKModelContinueWatchingListData
     */
    itemInclusions?: { [key: string]: MassiveSDKModelContinueWatchingListDataExpansion; };
}

/**
 *
 * @export
 * @interface MassiveSDKModelContinueWatchingListDataExpansion
 */
export interface MassiveSDKModelContinueWatchingListDataExpansion {
    /**
     *
     * @type {MassiveSDKModelItemSummary}
     * @memberof MassiveSDKModelContinueWatchingListDataExpansion
     */
    episode?: MassiveSDKModelItemSummary;
    /**
     *
     * @type {MassiveSDKModelItemSummary}
     * @memberof MassiveSDKModelContinueWatchingListDataExpansion
     */
    season?: MassiveSDKModelItemSummary;
    /**
     *
     * @type {MassiveSDKModelItemSummary}
     * @memberof MassiveSDKModelContinueWatchingListDataExpansion
     */
    show?: MassiveSDKModelItemSummary;
}

/**
 *
 * @export
 * @interface MassiveSDKModelCredit
 */
export interface MassiveSDKModelCredit {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelCredit
     */
    role?: MassiveSDKModelCredit.RoleEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelCredit
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelCredit
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelCredit
     */
    character?: string;
}

/**
 * @export
 * @namespace MassiveSDKModelCredit
 */
export namespace MassiveSDKModelCredit {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        Actor = <any> 'actor',
        Associateproducer = <any> 'associateproducer',
        Coactor = <any> 'coactor',
        Director = <any> 'director',
        Executiveproducer = <any> 'executiveproducer',
        Filminglocation = <any> 'filminglocation',
        Guest = <any> 'guest',
        Narrator = <any> 'narrator',
        Other = <any> 'other',
        Presenter = <any> 'presenter',
        Producer = <any> 'producer',
        Productmanager = <any> 'productmanager',
        Thememusicby = <any> 'thememusicby',
        Voice = <any> 'voice',
        Writer = <any> 'writer'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelEpisodes
 */
export interface MassiveSDKModelEpisodes {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodes
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodes
     */
    path?: string;
    /**
     *
     * @type {Array<MassiveSDKModelEpisodesItem>}
     * @memberof MassiveSDKModelEpisodes
     */
    items?: Array<MassiveSDKModelEpisodesItem>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelEpisodes
     */
    size?: number;
    /**
     *
     * @type {MassiveSDKModelPaging}
     * @memberof MassiveSDKModelEpisodes
     */
    paging?: MassiveSDKModelPaging;
}

/**
 *
 * @export
 * @interface MassiveSDKModelEpisodesItem
 */
export interface MassiveSDKModelEpisodesItem {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelEpisodesItem
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelEpisodesItem
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelEpisodesItem
     */
    releaseYear?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelEpisodesItem
     */
    episodeNumber?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    episodeName?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    seasonId?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    showId?: string;
    /**
     *
     * @type {Array<MassiveSDKModelOffer>}
     * @memberof MassiveSDKModelEpisodesItem
     */
    offers?: Array<MassiveSDKModelOffer>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelEpisodesItem
     */
    scopes?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelEpisodesItem
     */
    categories?: Array<string>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelEpisodesItem
     */
    customFields?: any;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    customId?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelEpisodesItem
     */
    genres?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    type?: string;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelEpisodesItem
     */
    maximumOfferEnd?: Date;
    /**
     *
     * @type {Array<MassiveSDKModelMedia>}
     * @memberof MassiveSDKModelEpisodesItem
     */
    media?: Array<MassiveSDKModelMedia>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    contextualTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    title?: string;
    /**
     *
     * @type {MassiveSDKModelClassification}
     * @memberof MassiveSDKModelEpisodesItem
     */
    classification?: MassiveSDKModelClassification;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelEpisodesItem
     */
    totalUserRatings?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    watchPath?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    showTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    seasonTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelEpisodesItem
     */
    badge?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelExclusionRule
 */
export interface MassiveSDKModelExclusionRule {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelExclusionRule
     */
    excludeDelivery?: MassiveSDKModelExclusionRule.ExcludeDeliveryEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelExclusionRule
     */
    excludeMinResolution?: MassiveSDKModelExclusionRule.ExcludeMinResolutionEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelExclusionRule
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelExclusionRule
     */
    device?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelExclusionRule
     */
    excludeAirplay?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelExclusionRule
     */
    excludeChromecast?: boolean;
}

/**
 * @export
 * @namespace MassiveSDKModelExclusionRule
 */
export namespace MassiveSDKModelExclusionRule {
    /**
     * @export
     * @enum {string}
     */
    export enum ExcludeDeliveryEnum {
        Stream = <any> 'Stream',
        Download = <any> 'Download',
        StreamOrDownload = <any> 'StreamOrDownload',
        ProgressiveDownload = <any> 'ProgressiveDownload',
        None = <any> 'None'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ExcludeMinResolutionEnum {
        SD = <any> 'SD',
        HD720 = <any> 'HD-720',
        HD1080 = <any> 'HD-1080',
        HD4K = <any> 'HD-4K',
        External = <any> 'External',
        Unknown = <any> 'Unknown'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelItemCustomMetadata
 */
export interface MassiveSDKModelItemCustomMetadata {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemCustomMetadata
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemCustomMetadata
     */
    value?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelItemDetail
 */
export interface MassiveSDKModelItemDetail {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    advisoryText?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    copyright?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    distributor?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    description?: string;
    /**
     *
     * @type {Array<MassiveSDKModelItemCustomMetadata>}
     * @memberof MassiveSDKModelItemDetail
     */
    customMetadata?: Array<MassiveSDKModelItemCustomMetadata>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemDetail
     */
    genrePaths?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    location?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    venue?: string;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelItemDetail
     */
    eventDate?: Date;
    /**
     *
     * @type {Array<MassiveSDKModelCredit>}
     * @memberof MassiveSDKModelItemDetail
     */
    credits?: Array<MassiveSDKModelCredit>;
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof MassiveSDKModelItemDetail
     */
    seasons?: MassiveSDKModelItemList;
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof MassiveSDKModelItemDetail
     */
    episodes?: MassiveSDKModelItemList;
    /**
     *
     * @type {MassiveSDKModelItemDetail}
     * @memberof MassiveSDKModelItemDetail
     */
    season?: MassiveSDKModelItemDetail;
    /**
     *
     * @type {MassiveSDKModelItemDetail}
     * @memberof MassiveSDKModelItemDetail
     */
    show?: MassiveSDKModelItemDetail;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    totalUserRatings?: number;
    /**
     *
     * @type {Array<MassiveSDKModelItemSummary>}
     * @memberof MassiveSDKModelItemDetail
     */
    trailers?: Array<MassiveSDKModelItemSummary>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    type?: MassiveSDKModelItemDetail.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    subtype?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    contextualTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    tagline?: string;
    /**
     *
     * @type {MassiveSDKModelClassificationSummary}
     * @memberof MassiveSDKModelItemDetail
     */
    classification?: MassiveSDKModelClassificationSummary;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    watchPath?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemDetail
     */
    scopes?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    releaseYear?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    episodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    availableEpisodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    availableSeasonCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    seasonNumber?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    episodeNumber?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    episodeName?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    showId?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    showTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    seasonId?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    seasonTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    channelShortCode?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelItemDetail
     */
    hasClosedCaptions?: boolean;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    averageUserRating?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    badge?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemDetail
     */
    genres?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemDetail
     */
    duration?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemDetail
     */
    customId?: string;
    /**
     *
     * @type {Array<MassiveSDKModelOffer>}
     * @memberof MassiveSDKModelItemDetail
     */
    offers?: Array<MassiveSDKModelOffer>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelItemDetail
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {Array<MassiveSDKModelTheme>}
     * @memberof MassiveSDKModelItemDetail
     */
    themes?: Array<MassiveSDKModelTheme>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelItemDetail
     */
    customFields?: any;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelItemDetail
     */
    vams?: Array<any>;
}

/**
 * @export
 * @namespace MassiveSDKModelItemDetail
 */
export namespace MassiveSDKModelItemDetail {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Movie = <any> 'movie',
        Show = <any> 'show',
        Season = <any> 'season',
        Episode = <any> 'episode',
        Program = <any> 'program',
        Link = <any> 'link',
        Trailer = <any> 'trailer',
        Channel = <any> 'channel',
        CustomAsset = <any> 'customAsset'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelItemList
 */
export interface MassiveSDKModelItemList {
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemList
     */
    itemTypes?: Array<MassiveSDKModelItemList.ItemTypesEnum>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    tagline?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemList
     */
    size?: number;
    /**
     *
     * @type {Array<MassiveSDKModelItemSummary>}
     * @memberof MassiveSDKModelItemList
     */
    items?: Array<MassiveSDKModelItemSummary>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelItemList
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemList
     */
    parameter?: string;
    /**
     *
     * @type {MassiveSDKModelPagination}
     * @memberof MassiveSDKModelItemList
     */
    paging?: MassiveSDKModelPagination;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelItemList
     */
    customFields?: any;
    /**
     *
     * @type {Array<MassiveSDKModelTheme>}
     * @memberof MassiveSDKModelItemList
     */
    themes?: Array<MassiveSDKModelTheme>;
    /**
     *
     * @type {MassiveSDKModelListData}
     * @memberof MassiveSDKModelItemList
     */
    listData?: MassiveSDKModelListData;
}

/**
 * @export
 * @namespace MassiveSDKModelItemList
 */
export namespace MassiveSDKModelItemList {
    /**
     * @export
     * @enum {string}
     */
    export enum ItemTypesEnum {
        Movie = <any> 'movie',
        Show = <any> 'show',
        Season = <any> 'season',
        Episode = <any> 'episode',
        Program = <any> 'program',
        Link = <any> 'link',
        Trailer = <any> 'trailer',
        Channel = <any> 'channel',
        CustomAsset = <any> 'customAsset'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelItemSummary
 */
export interface MassiveSDKModelItemSummary {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    type?: MassiveSDKModelItemSummary.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    subtype?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    contextualTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    tagline?: string;
    /**
     *
     * @type {MassiveSDKModelClassificationSummary}
     * @memberof MassiveSDKModelItemSummary
     */
    classification?: MassiveSDKModelClassificationSummary;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    watchPath?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemSummary
     */
    scopes?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    releaseYear?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    episodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    availableEpisodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    availableSeasonCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    seasonNumber?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    episodeNumber?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    episodeName?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    showId?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    showTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    seasonId?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    seasonTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    channelShortCode?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelItemSummary
     */
    hasClosedCaptions?: boolean;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    averageUserRating?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    badge?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelItemSummary
     */
    genres?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelItemSummary
     */
    duration?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelItemSummary
     */
    customId?: string;
    /**
     *
     * @type {Array<MassiveSDKModelOffer>}
     * @memberof MassiveSDKModelItemSummary
     */
    offers?: Array<MassiveSDKModelOffer>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelItemSummary
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {Array<MassiveSDKModelTheme>}
     * @memberof MassiveSDKModelItemSummary
     */
    themes?: Array<MassiveSDKModelTheme>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelItemSummary
     */
    customFields?: any;
    /**
     *
     * @type {MassiveSDKModelShow}
     * @memberof MassiveSDKModelItemSummary
     */
    show?: MassiveSDKModelShow;
    /**
     *
     * @type {MassiveSDKModelEpisodes}
     * @memberof MassiveSDKModelItemSummary
     */
    episodes?: MassiveSDKModelEpisodes;
    /**
     *
     * @type {MassiveSDKModelItemSummary}
     * @memberof MassiveSDKModelItemSummary
     */
    season?: MassiveSDKModelItemSummary;
    /**
     *
     * @type {Array<MassiveSDKModelCredit>}
     * @memberof MassiveSDKModelItemSummary
     */
    credits?: Array<MassiveSDKModelCredit>;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelItemSummary
     */
    vams?: Array<any>;
}

/**
 * @export
 * @namespace MassiveSDKModelItemSummary
 */
export namespace MassiveSDKModelItemSummary {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Movie = <any> 'movie',
        Show = <any> 'show',
        Season = <any> 'season',
        Episode = <any> 'episode',
        Program = <any> 'program',
        Link = <any> 'link',
        Trailer = <any> 'trailer',
        Channel = <any> 'channel',
        CustomAsset = <any> 'customAsset'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelLanguage
 */
export interface MassiveSDKModelLanguage {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelLanguage
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelLanguage
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelLanguage
     */
    title?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelListData
 */
export interface MassiveSDKModelListData {
    /**
     *
     * @type {MassiveSDKModelContinueWatchingListData}
     * @memberof MassiveSDKModelListData
     */
    continueWatching?: MassiveSDKModelContinueWatchingListData;
}

/**
 *
 * @export
 * @interface MassiveSDKModelMedia
 */
export interface MassiveSDKModelMedia {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelMedia
     */
    duration?: number;
}

/**
 *
 * @export
 * @interface MassiveSDKModelNavContent
 */
export interface MassiveSDKModelNavContent {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelNavContent
     */
    title?: string;
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof MassiveSDKModelNavContent
     */
    list?: MassiveSDKModelItemList;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelNavContent
     */
    imageType?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelNavEntry
 */
export interface MassiveSDKModelNavEntry {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelNavEntry
     */
    depth?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelNavEntry
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelNavEntry
     */
    path?: string;
    /**
     *
     * @type {MassiveSDKModelNavContent}
     * @memberof MassiveSDKModelNavEntry
     */
    content?: MassiveSDKModelNavContent;
    /**
     *
     * @type {Array<MassiveSDKModelNavEntry>}
     * @memberof MassiveSDKModelNavEntry
     */
    children?: Array<MassiveSDKModelNavEntry>;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelNavEntry
     */
    featured?: boolean;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelNavEntry
     */
    customFields?: any;
}

/**
 *
 * @export
 * @interface MassiveSDKModelNavigation
 */
export interface MassiveSDKModelNavigation {
    /**
     *
     * @type {Array<MassiveSDKModelNavEntry>}
     * @memberof MassiveSDKModelNavigation
     */
    header?: Array<MassiveSDKModelNavEntry>;
    /**
     *
     * @type {MassiveSDKModelNavEntry}
     * @memberof MassiveSDKModelNavigation
     */
    footer?: MassiveSDKModelNavEntry;
    /**
     *
     * @type {MassiveSDKModelNavEntry}
     * @memberof MassiveSDKModelNavigation
     */
    account?: MassiveSDKModelNavEntry;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelNavigation
     */
    copyright?: string;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelNavigation
     */
    customFields?: any;
}

/**
 *
 * @export
 * @interface MassiveSDKModelOffer
 */
export interface MassiveSDKModelOffer {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    deliveryType?: MassiveSDKModelOffer.DeliveryTypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    resolution?: MassiveSDKModelOffer.ResolutionEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    ownership?: MassiveSDKModelOffer.OwnershipEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    availability?: MassiveSDKModelOffer.AvailabilityEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelOffer
     */
    scopes?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOffer
     */
    maxPlays?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOffer
     */
    maxDownloads?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOffer
     */
    rentalPeriod?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOffer
     */
    playPeriod?: number;
    /**
     *
     * @type {Array<MassiveSDKModelExclusionRule>}
     * @memberof MassiveSDKModelOffer
     */
    exclusionRules?: Array<MassiveSDKModelExclusionRule>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOffer
     */
    price?: number;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelOffer
     */
    startDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelOffer
     */
    endDate?: Date;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelOffer
     */
    subscriptionCode?: string;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelOffer
     */
    customFields?: any;
}

/**
 * @export
 * @namespace MassiveSDKModelOffer
 */
export namespace MassiveSDKModelOffer {
    /**
     * @export
     * @enum {string}
     */
    export enum DeliveryTypeEnum {
        Stream = <any> 'Stream',
        Download = <any> 'Download',
        StreamOrDownload = <any> 'StreamOrDownload',
        ProgressiveDownload = <any> 'ProgressiveDownload',
        None = <any> 'None'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ResolutionEnum {
        SD = <any> 'SD',
        HD720 = <any> 'HD-720',
        HD1080 = <any> 'HD-1080',
        HD4K = <any> 'HD-4K',
        External = <any> 'External',
        Unknown = <any> 'Unknown'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OwnershipEnum {
        Subscription = <any> 'Subscription',
        Free = <any> 'Free',
        Rent = <any> 'Rent',
        Own = <any> 'Own',
        None = <any> 'None'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AvailabilityEnum {
        Available = <any> 'Available',
        ComingSoon = <any> 'ComingSoon'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelOptions
 */
export interface MassiveSDKModelOptions {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelOptions
     */
    pageSize?: number;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPage
 */
export interface MassiveSDKModelPage {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPage
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPage
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPage
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPage
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPage
     */
    template?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPage
     */
    isStatic?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPage
     */
    isSystemPage?: boolean;
    /**
     *
     * @type {MassiveSDKModelPageMetadata}
     * @memberof MassiveSDKModelPage
     */
    metadata?: MassiveSDKModelPageMetadata;
    /**
     *
     * @type {Array<MassiveSDKModelPageEntry>}
     * @memberof MassiveSDKModelPage
     */
    entries?: Array<MassiveSDKModelPageEntry>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelPage
     */
    customFields?: any;
    /**
     *
     * @type {MassiveSDKModelItemDetail}
     * @memberof MassiveSDKModelPage
     */
    item?: MassiveSDKModelItemDetail;
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof MassiveSDKModelPage
     */
    list?: MassiveSDKModelItemList;
    /**
     *
     * @type {Array<MassiveSDKModelTheme>}
     * @memberof MassiveSDKModelPage
     */
    themes?: Array<MassiveSDKModelTheme>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPageEntry
 */
export interface MassiveSDKModelPageEntry {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageEntry
     */
    type?: MassiveSDKModelPageEntry.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageEntry
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageEntry
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageEntry
     */
    template?: string;
    /**
     *
     * @type {MassiveSDKModelItemSummary}
     * @memberof MassiveSDKModelPageEntry
     */
    item?: MassiveSDKModelItemSummary;
    /**
     *
     * @type {MassiveSDKModelItemList}
     * @memberof MassiveSDKModelPageEntry
     */
    list?: MassiveSDKModelItemList;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageEntry
     */
    text?: string;
    /**
     *
     * @type {Array<MassiveSDKModelPerson>}
     * @memberof MassiveSDKModelPageEntry
     */
    people?: Array<MassiveSDKModelPerson>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelPageEntry
     */
    customFields?: any;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelPageEntry
     */
    images?: { [key: string]: string; };
}

/**
 * @export
 * @namespace MassiveSDKModelPageEntry
 */
export namespace MassiveSDKModelPageEntry {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ItemEntry = <any> 'ItemEntry',
        ItemDetailEntry = <any> 'ItemDetailEntry',
        ListEntry = <any> 'ListEntry',
        ListDetailEntry = <any> 'ListDetailEntry',
        UserEntry = <any> 'UserEntry',
        TextEntry = <any> 'TextEntry',
        ImageEntry = <any> 'ImageEntry',
        CustomEntry = <any> 'CustomEntry',
        PeopleEntry = <any> 'PeopleEntry'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelPageMetadata
 */
export interface MassiveSDKModelPageMetadata {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageMetadata
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelPageMetadata
     */
    keywords?: Array<string>;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPageSummary
 */
export interface MassiveSDKModelPageSummary {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageSummary
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageSummary
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageSummary
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageSummary
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPageSummary
     */
    template?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPageSummary
     */
    isStatic?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPageSummary
     */
    isSystemPage?: boolean;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPagination
 */
export interface MassiveSDKModelPagination {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPagination
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPagination
     */
    previous?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPagination
     */
    page?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPagination
     */
    size?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPagination
     */
    total?: number;
    /**
     *
     * @type {MassiveSDKModelPaginationAuth}
     * @memberof MassiveSDKModelPagination
     */
    authorization?: MassiveSDKModelPaginationAuth;
    /**
     *
     * @type {MassiveSDKModelPaginationOptions}
     * @memberof MassiveSDKModelPagination
     */
    options?: MassiveSDKModelPaginationOptions;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPaginationAuth
 */
export interface MassiveSDKModelPaginationAuth {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationAuth
     */
    type?: MassiveSDKModelPaginationAuth.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationAuth
     */
    scope?: MassiveSDKModelPaginationAuth.ScopeEnum;
}

/**
 * @export
 * @namespace MassiveSDKModelPaginationAuth
 */
export namespace MassiveSDKModelPaginationAuth {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        UserAccount = <any> 'UserAccount',
        UserProfile = <any> 'UserProfile'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ScopeEnum {
        Catalog = <any> 'Catalog',
        Commerce = <any> 'Commerce',
        Settings = <any> 'Settings'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelPaginationOptions
 */
export interface MassiveSDKModelPaginationOptions {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationOptions
     */
    order?: MassiveSDKModelPaginationOptions.OrderEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationOptions
     */
    orderBy?: MassiveSDKModelPaginationOptions.OrderByEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationOptions
     */
    itemType?: MassiveSDKModelPaginationOptions.ItemTypeEnum;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPaginationOptions
     */
    pageSize?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPaginationOptions
     */
    maxRating?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPaginationOptions
     */
    completed?: boolean;
}

/**
 * @export
 * @namespace MassiveSDKModelPaginationOptions
 */
export namespace MassiveSDKModelPaginationOptions {
    /**
     * @export
     * @enum {string}
     */
    export enum OrderEnum {
        Asc = <any> 'asc',
        Desc = <any> 'desc'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderByEnum {
        AZ = <any> 'a-z',
        ReleaseYear = <any> 'release-year',
        DateAdded = <any> 'date-added'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ItemTypeEnum {
        Movie = <any> 'movie',
        Show = <any> 'show',
        Season = <any> 'season',
        Episode = <any> 'episode',
        Program = <any> 'program',
        Link = <any> 'link',
        Trailer = <any> 'trailer',
        Channel = <any> 'channel',
        CustomAsset = <any> 'customAsset'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelPaging
 */
export interface MassiveSDKModelPaging {
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPaging
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPaging
     */
    page?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPaging
     */
    size?: number;
    /**
     *
     * @type {MassiveSDKModelOptions}
     * @memberof MassiveSDKModelPaging
     */
    options?: MassiveSDKModelOptions;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPerson
 */
export interface MassiveSDKModelPerson {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPerson
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPerson
     */
    path?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelPlan
 */
export interface MassiveSDKModelPlan {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    type?: MassiveSDKModelPlan.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    revenueType?: MassiveSDKModelPlan.RevenueTypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    billingPeriodType?: MassiveSDKModelPlan.BillingPeriodTypeEnum;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    tagline?: string;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPlan
     */
    isFeatured?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPlan
     */
    isActive?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPlan
     */
    isPrivate?: boolean;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    subscriptionCode?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    alias?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelPlan
     */
    benefits?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPlan
     */
    billingPeriodFrequency?: number;
    /**
     *
     * @type {boolean}
     * @memberof MassiveSDKModelPlan
     */
    hasTrialPeriod?: boolean;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPlan
     */
    trialPeriodDays?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    termsAndConditions?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelPlan
     */
    price?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelPlan
     */
    currency?: string;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelPlan
     */
    customFields?: any;
}

/**
 * @export
 * @namespace MassiveSDKModelPlan
 */
export namespace MassiveSDKModelPlan {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Free = <any> 'Free',
        Subscription = <any> 'Subscription'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RevenueTypeEnum {
        TVOD = <any> 'TVOD',
        SVOD = <any> 'SVOD'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum BillingPeriodTypeEnum {
        Day = <any> 'day',
        Week = <any> 'week',
        Month = <any> 'month',
        Year = <any> 'year',
        None = <any> 'none'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelSeasons
 */
export interface MassiveSDKModelSeasons {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasons
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasons
     */
    path?: string;
    /**
     *
     * @type {Array<MassiveSDKModelSeasonsItem>}
     * @memberof MassiveSDKModelSeasons
     */
    items?: Array<MassiveSDKModelSeasonsItem>;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasons
     */
    size?: number;
    /**
     *
     * @type {MassiveSDKModelPaging}
     * @memberof MassiveSDKModelSeasons
     */
    paging?: MassiveSDKModelPaging;
}

/**
 *
 * @export
 * @interface MassiveSDKModelSeasonsItem
 */
export interface MassiveSDKModelSeasonsItem {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelSeasonsItem
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasonsItem
     */
    releaseYear?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasonsItem
     */
    availableEpisodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasonsItem
     */
    seasonNumber?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    showId?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasonsItem
     */
    episodeCount?: number;
    /**
     *
     * @type {Array<MassiveSDKModelOffer>}
     * @memberof MassiveSDKModelSeasonsItem
     */
    offers?: Array<MassiveSDKModelOffer>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelSeasonsItem
     */
    scopes?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelSeasonsItem
     */
    categories?: Array<string>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelSeasonsItem
     */
    customFields?: any;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    customId?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelSeasonsItem
     */
    genres?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    type?: string;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelSeasonsItem
     */
    maximumOfferEnd?: Date;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelSeasonsItem
     */
    media?: Array<any>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    contextualTitle?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    title?: string;
    /**
     *
     * @type {MassiveSDKModelClassification}
     * @memberof MassiveSDKModelSeasonsItem
     */
    classification?: MassiveSDKModelClassification;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelSeasonsItem
     */
    totalUserRatings?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelSeasonsItem
     */
    showTitle?: string;
}

/**
 *
 * @export
 * @interface MassiveSDKModelShow
 */
export interface MassiveSDKModelShow {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MassiveSDKModelShow
     */
    images?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    advisoryText?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    copyright?: string;
    /**
     *
     * @type {Array<MassiveSDKModelCredit>}
     * @memberof MassiveSDKModelShow
     */
    credits?: Array<MassiveSDKModelCredit>;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelShow
     */
    customMetadata?: Array<any>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    distributor?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelShow
     */
    availableSeasonCount?: number;
    /**
     *
     * @type {Array<MassiveSDKModelOffer>}
     * @memberof MassiveSDKModelShow
     */
    offers?: Array<MassiveSDKModelOffer>;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelShow
     */
    trailers?: Array<any>;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelShow
     */
    vams?: Array<any>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelShow
     */
    scopes?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelShow
     */
    categories?: Array<string>;
    /**
     *
     * @type {any}
     * @memberof MassiveSDKModelShow
     */
    customFields?: any;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    customId?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelShow
     */
    genres?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    description?: string;
    /**
     *
     * @type {Date}
     * @memberof MassiveSDKModelShow
     */
    maximumOfferEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    contextualTitle?: string;
    /**
     *
     * @type {Array<any>}
     * @memberof MassiveSDKModelShow
     */
    themes?: Array<any>;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelShow
     */
    totalUserRatings?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelShow
     */
    path?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MassiveSDKModelShow
     */
    genrePaths?: Array<string>;
    /**
     *
     * @type {MassiveSDKModelSeasons}
     * @memberof MassiveSDKModelShow
     */
    seasons?: MassiveSDKModelSeasons;
}

/**
 *
 * @export
 * @interface MassiveSDKModelTheme
 */
export interface MassiveSDKModelTheme {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelTheme
     */
    type?: MassiveSDKModelTheme.TypeEnum;
    /**
     *
     * @type {Array<MassiveSDKModelThemeColor>}
     * @memberof MassiveSDKModelTheme
     */
    colors?: Array<MassiveSDKModelThemeColor>;
}

/**
 * @export
 * @namespace MassiveSDKModelTheme
 */
export namespace MassiveSDKModelTheme {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Background = <any> 'Background',
        Text = <any> 'Text',
        Custom = <any> 'Custom'
    }
}

/**
 *
 * @export
 * @interface MassiveSDKModelThemeColor
 */
export interface MassiveSDKModelThemeColor {
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelThemeColor
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof MassiveSDKModelThemeColor
     */
    opacity?: number;
    /**
     *
     * @type {string}
     * @memberof MassiveSDKModelThemeColor
     */
    value?: string;
}


/**
 * ConfigApi - fetch parameter creator
 * @export
 */
export const ConfigApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {Array<string>} [include]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(include?: Array<string>, device?: string, sub?: string, segments?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/v1/content/Config`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {Array<string>} [include]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(include?: Array<string>, device?: string, sub?: string, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsConfigGetConfigResponse> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).getConfig(include, device, sub, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @param {Array<string>} [include]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(include?: Array<string>, device?: string, sub?: string, segments?: Array<string>, options?: any) {
            return ConfigApiFp(configuration).getConfig(include, device, sub, segments, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
    /**
     *
     * @param {Array<string>} [include]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public getConfig(include?: Array<string>, device?: string, sub?: string, segments?: Array<string>, options?: any) {
        return ConfigApiFp(this.configuration).getConfig(include, device, sub, segments, options)(this.fetch, this.basePath);
    }

}

/**
 * ItemsApi - fetch parameter creator
 * @export
 */
export const ItemsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {string} [maxRating]
         * @param {string} [expand]
         * @param {string} [selectSeason]
         * @param {boolean} [useCustomId]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(id: string, maxRating?: string, expand?: string, selectSeason?: string, useCustomId?: boolean, device?: string, sub?: string, segments?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItem.');
            }
            const localVarPath = `/v1/content/Items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (selectSeason !== undefined) {
                localVarQueryParameter['selectSeason'] = selectSeason;
            }

            if (useCustomId !== undefined) {
                localVarQueryParameter['useCustomId'] = useCustomId;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemChildrenList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, device?: string, sub?: string, segments?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItemChildrenList.');
            }
            const localVarPath = `/v1/content/Items/{id}/children`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemRelatedList(id: string, page?: number, pageSize?: number, maxRating?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItemRelatedList.');
            }
            const localVarPath = `/v1/content/Items/{id}/related`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (useCustomId !== undefined) {
                localVarQueryParameter['useCustomId'] = useCustomId;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {string} [maxRating]
         * @param {string} [expand]
         * @param {string} [selectSeason]
         * @param {boolean} [useCustomId]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(id: string, maxRating?: string, expand?: string, selectSeason?: string, useCustomId?: boolean, device?: string, sub?: string, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsItemsGetItemResponse> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).getItem(id, maxRating, expand, selectSeason, useCustomId, device, sub, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemChildrenList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, device?: string, sub?: string, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsItemsGetItemChildrenListResponse> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).getItemChildrenList(id, page, pageSize, maxRating, order, device, sub, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemRelatedList(id: string, page?: number, pageSize?: number, maxRating?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsItemsGetItemRelatedListResponse> {
            const localVarFetchArgs = ItemsApiFetchParamCreator(configuration).getItemRelatedList(id, page, pageSize, maxRating, device, sub, useCustomId, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @param {string} id
         * @param {string} [maxRating]
         * @param {string} [expand]
         * @param {string} [selectSeason]
         * @param {boolean} [useCustomId]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(id: string, maxRating?: string, expand?: string, selectSeason?: string, useCustomId?: boolean, device?: string, sub?: string, segments?: Array<string>, options?: any) {
            return ItemsApiFp(configuration).getItem(id, maxRating, expand, selectSeason, useCustomId, device, sub, segments, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemChildrenList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
            return ItemsApiFp(configuration).getItemChildrenList(id, page, pageSize, maxRating, order, device, sub, segments, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemRelatedList(id: string, page?: number, pageSize?: number, maxRating?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any) {
            return ItemsApiFp(configuration).getItemRelatedList(id, page, pageSize, maxRating, device, sub, useCustomId, segments, options)(fetch, basePath);
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {string} [maxRating]
     * @param {string} [expand]
     * @param {string} [selectSeason]
     * @param {boolean} [useCustomId]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItem(id: string, maxRating?: string, expand?: string, selectSeason?: string, useCustomId?: boolean, device?: string, sub?: string, segments?: Array<string>, options?: any) {
        return ItemsApiFp(this.configuration).getItem(id, maxRating, expand, selectSeason, useCustomId, device, sub, segments, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [maxRating]
     * @param {string} [order]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemChildrenList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
        return ItemsApiFp(this.configuration).getItemChildrenList(id, page, pageSize, maxRating, order, device, sub, segments, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [maxRating]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {boolean} [useCustomId]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemRelatedList(id: string, page?: number, pageSize?: number, maxRating?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any) {
        return ItemsApiFp(this.configuration).getItemRelatedList(id, page, pageSize, maxRating, device, sub, useCustomId, segments, options)(this.fetch, this.basePath);
    }

}

/**
 * ListsApi - fetch parameter creator
 * @export
 */
export const ListsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [param]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, param?: string, itemType?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getList.');
            }
            const localVarPath = `/v1/content/Lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (param !== undefined) {
                localVarQueryParameter['param'] = param;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (useCustomId !== undefined) {
                localVarQueryParameter['useCustomId'] = useCustomId;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Array<string>} [ids]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(ids?: Array<string>, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, itemType?: string, device?: string, sub?: string, segments?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/v1/content/Lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [param]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, param?: string, itemType?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsListsGetListResponse> {
            const localVarFetchArgs = ListsApiFetchParamCreator(configuration).getList(id, page, pageSize, maxRating, order, orderBy, param, itemType, device, sub, useCustomId, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Array<string>} [ids]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(ids?: Array<string>, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, itemType?: string, device?: string, sub?: string, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsListsGetListsResponse> {
            const localVarFetchArgs = ListsApiFetchParamCreator(configuration).getLists(ids, pageSize, maxRating, order, orderBy, itemType, device, sub, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @param {string} id
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [param]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {boolean} [useCustomId]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, param?: string, itemType?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any) {
            return ListsApiFp(configuration).getList(id, page, pageSize, maxRating, order, orderBy, param, itemType, device, sub, useCustomId, segments, options)(fetch, basePath);
        },
        /**
         *
         * @param {Array<string>} [ids]
         * @param {number} [pageSize]
         * @param {string} [maxRating]
         * @param {string} [order]
         * @param {string} [orderBy]
         * @param {string} [itemType]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(ids?: Array<string>, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, itemType?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
            return ListsApiFp(configuration).getLists(ids, pageSize, maxRating, order, orderBy, itemType, device, sub, segments, options)(fetch, basePath);
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [maxRating]
     * @param {string} [order]
     * @param {string} [orderBy]
     * @param {string} [param]
     * @param {string} [itemType]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {boolean} [useCustomId]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getList(id: string, page?: number, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, param?: string, itemType?: string, device?: string, sub?: string, useCustomId?: boolean, segments?: Array<string>, options?: any) {
        return ListsApiFp(this.configuration).getList(id, page, pageSize, maxRating, order, orderBy, param, itemType, device, sub, useCustomId, segments, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @param {Array<string>} [ids]
     * @param {number} [pageSize]
     * @param {string} [maxRating]
     * @param {string} [order]
     * @param {string} [orderBy]
     * @param {string} [itemType]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getLists(ids?: Array<string>, pageSize?: number, maxRating?: string, order?: string, orderBy?: string, itemType?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
        return ListsApiFp(this.configuration).getLists(ids, pageSize, maxRating, order, orderBy, itemType, device, sub, segments, options)(this.fetch, this.basePath);
    }

}

/**
 * PageApi - fetch parameter creator
 * @export
 */
export const PageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} [path]
         * @param {boolean} [useCustomId]
         * @param {number} [listPageSize]
         * @param {number} [listPageSizeLarge]
         * @param {number} [maxListPrefetch]
         * @param {string} [itemDetailExpand]
         * @param {string} [itemDetailSelectSeason]
         * @param {string} [textEntryFormat]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(path?: string, useCustomId?: boolean, listPageSize?: number, listPageSizeLarge?: number, maxListPrefetch?: number, itemDetailExpand?: string, itemDetailSelectSeason?: string, textEntryFormat?: string, maxRating?: string, device?: string, sub?: string, segments?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/v1/content/Page`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AWSApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-api-key")
					: configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (useCustomId !== undefined) {
                localVarQueryParameter['useCustomId'] = useCustomId;
            }

            if (listPageSize !== undefined) {
                localVarQueryParameter['listPageSize'] = listPageSize;
            }

            if (listPageSizeLarge !== undefined) {
                localVarQueryParameter['listPageSizeLarge'] = listPageSizeLarge;
            }

            if (maxListPrefetch !== undefined) {
                localVarQueryParameter['maxListPrefetch'] = maxListPrefetch;
            }

            if (itemDetailExpand !== undefined) {
                localVarQueryParameter['itemDetailExpand'] = itemDetailExpand;
            }

            if (itemDetailSelectSeason !== undefined) {
                localVarQueryParameter['itemDetailSelectSeason'] = itemDetailSelectSeason;
            }

            if (textEntryFormat !== undefined) {
                localVarQueryParameter['textEntryFormat'] = textEntryFormat;
            }

            if (maxRating !== undefined) {
                localVarQueryParameter['maxRating'] = maxRating;
            }

            if (device !== undefined) {
                localVarQueryParameter['device'] = device;
            }

            if (sub !== undefined) {
                localVarQueryParameter['sub'] = sub;
            }

            if (segments) {
                localVarQueryParameter['segments'] = segments;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} [path]
         * @param {boolean} [useCustomId]
         * @param {number} [listPageSize]
         * @param {number} [listPageSizeLarge]
         * @param {number} [maxListPrefetch]
         * @param {string} [itemDetailExpand]
         * @param {string} [itemDetailSelectSeason]
         * @param {string} [textEntryFormat]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(path?: string, useCustomId?: boolean, listPageSize?: number, listPageSizeLarge?: number, maxListPrefetch?: number, itemDetailExpand?: string, itemDetailSelectSeason?: string, textEntryFormat?: string, maxRating?: string, device?: string, sub?: string, segments?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BritboxAPIContentModelsPageGetPageResponse> {
            const localVarFetchArgs = PageApiFetchParamCreator(configuration).getPage(path, useCustomId, listPageSize, listPageSizeLarge, maxListPrefetch, itemDetailExpand, itemDetailSelectSeason, textEntryFormat, maxRating, device, sub, segments, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @param {string} [path]
         * @param {boolean} [useCustomId]
         * @param {number} [listPageSize]
         * @param {number} [listPageSizeLarge]
         * @param {number} [maxListPrefetch]
         * @param {string} [itemDetailExpand]
         * @param {string} [itemDetailSelectSeason]
         * @param {string} [textEntryFormat]
         * @param {string} [maxRating]
         * @param {string} [device]
         * @param {string} [sub]
         * @param {Array<string>} [segments]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(path?: string, useCustomId?: boolean, listPageSize?: number, listPageSizeLarge?: number, maxListPrefetch?: number, itemDetailExpand?: string, itemDetailSelectSeason?: string, textEntryFormat?: string, maxRating?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
            return PageApiFp(configuration).getPage(path, useCustomId, listPageSize, listPageSizeLarge, maxListPrefetch, itemDetailExpand, itemDetailSelectSeason, textEntryFormat, maxRating, device, sub, segments, options)(fetch, basePath);
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     *
     * @param {string} [path]
     * @param {boolean} [useCustomId]
     * @param {number} [listPageSize]
     * @param {number} [listPageSizeLarge]
     * @param {number} [maxListPrefetch]
     * @param {string} [itemDetailExpand]
     * @param {string} [itemDetailSelectSeason]
     * @param {string} [textEntryFormat]
     * @param {string} [maxRating]
     * @param {string} [device]
     * @param {string} [sub]
     * @param {Array<string>} [segments]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPage(path?: string, useCustomId?: boolean, listPageSize?: number, listPageSizeLarge?: number, maxListPrefetch?: number, itemDetailExpand?: string, itemDetailSelectSeason?: string, textEntryFormat?: string, maxRating?: string, device?: string, sub?: string, segments?: Array<string>, options?: any) {
        return PageApiFp(this.configuration).getPage(path, useCustomId, listPageSize, listPageSizeLarge, maxListPrefetch, itemDetailExpand, itemDetailSelectSeason, textEntryFormat, maxRating, device, sub, segments, options)(this.fetch, this.basePath);
    }

}

